* plog - pico log for go

pico log - because it's so small and has no dependencies (only from go's stdlib).

** Why?

I want a logging library with

  - zero dependencies
  - can emit log messages per chan
  - easy to use
  - TODO: abstract over other loggers

*** Non Goals

  - blazing fast
  - a lot of features

** Examples

*** console logging

Simple console logging

 #+BEGIN_SRC go :tangle examples/console.go
   package main

   import  "github.com/j-keck/plog"

   func main() {
       log := plog.NewDefaultConsoleLogger()

       log.Info("startup")
       log.Debug("change to debug level")
       log.SetLevel(plog.Debug)
       log.Debug("level changed")
   }
 #+END_SRC

#+BEGIN_SRC shell :results output :exports both
go run examples/console.go
#+END_SRC

#+RESULTS:
: Fri May 10 11:29:58 CEST 2019 |  INFO | startup
: Fri May 10 11:29:58 CEST 2019 | DEBUG | level changed


*** log stream

log stream per go chan

#+BEGIN_SRC go :tangle examples/stream.go
  package main

  import "github.com/j-keck/plog"
  import "fmt"
  import "time"

  func main() {
      log := plog.NewStreamLogger()
      logC := log.Subscribe(10)

      log.Info("startup")
      log.Debug("change to debug level")
      log.SetLevel(plog.Debug)
      log.Debug("level changed")

      go func() {
        for msg := range logC {
          fmt.Printf("%s: %s\n", msg.Level, msg.Message)
        }
      }()

      log.WaitForSubscribers(100 * time.Millisecond)
  }
#+END_SRC

#+BEGIN_SRC shell :results output :exports both
go run examples/stream.go
#+END_SRC

#+RESULTS:
: INFO: startup
: DEBUG: level changed


*** flags

Log level per flag

#+BEGIN_SRC go :tangle examples/flag.go
  package main

  import "github.com/j-keck/plog"
  import "flag"


  func main() {
      log := plog.NewDefaultConsoleLogger()

      logLevel := plog.Info
      plog.FlagDebugVar(&logLevel,  "v", "debug")
      plog.FlagTraceVar(&logLevel, "vv", "trace")
      flag.Parse()

      log.SetLevel(logLevel)

      log.Info("info")
      log.Debug("debug")
      log.Trace("trace")
  }
#+END_SRC

#+BEGIN_SRC shell :results output :exports both
run() { echo $(repeat 80 printf -); echo $@; $@; echo;}

run go run examples/flag.go
run go run examples/flag.go -v
run go run examples/flag.go -vv
#+END_SRC

#+RESULTS:
#+begin_example
--------------------------------------------------------------------------------
go run examples/flag.go
Fri May 10 11:30:01 CEST 2019 |  INFO | info

--------------------------------------------------------------------------------
go run examples/flag.go -v
Fri May 10 11:30:01 CEST 2019 |  INFO | info
Fri May 10 11:30:01 CEST 2019 | DEBUG | debug

--------------------------------------------------------------------------------
go run examples/flag.go -vv
Fri May 10 11:30:01 CEST 2019 |  INFO | info
Fri May 10 11:30:01 CEST 2019 | DEBUG | debug
Fri May 10 11:30:01 CEST 2019 | TRACE | trace

#+end_example


*** broadcast

Broadcast log messages to multiple receivers.

To simplify the example, only console loggers are used,
but you can also use stream loggers.

#+BEGIN_SRC go :tangle examples/broadcast.go
  package main

  import "github.com/j-keck/plog"

  func main() {
      log := plog.NewBroadcastLogger(
          plog.NewConsoleLogger(" | ", plog.Message, plog.Level),
          plog.NewConsoleLogger(" - ", plog.Message, plog.TimestampUnixDate),
          plog.NewConsoleLogger(" / ", plog.Message, plog.TimestampMillis),
      )

      log.Info("startup")
      log.Debug("change to debug level")
      log.SetLevel(plog.Debug)
      log.Debug("level changed")
  }
#+END_SRC

#+BEGIN_SRC shell :results output :exports both
go run examples/broadcast.go
#+END_SRC

#+RESULTS:
: startup |  INFO
: startup - Fri May 10 11:30:03 CEST 2019
: startup / May 10 11:30:03.634
: level changed | DEBUG
: level changed - Fri May 10 11:30:03 CEST 2019
: level changed / May 10 11:30:03.634

*** change log output

#+BEGIN_SRC go :tangle examples/logformat.go
  package main

  import "github.com/j-keck/plog"

  func main() {
      log := plog.NewConsoleLogger(" - ",
          plog.TimestampFmt("2006-01-02T15:04:05Z07:00"),
          plog.LevelFmt("(%-5s)"),
          plog.Location,
          plog.Message,
      )

      log.Info("startup")
      log.Debug("change to debug level")
      log.SetLevel(plog.Debug)
      log.Debug("level changed")
  }
#+END_SRC


#+BEGIN_SRC shell :results output :exports both
go run examples/logformat.go
#+END_SRC

#+RESULTS:
: 2019-05-10T11:30:06+02:00 - (INFO ) -            logformat:13  - startup
: 2019-05-10T11:30:06+02:00 - (DEBUG) -            logformat:16  - level changed

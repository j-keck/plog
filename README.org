* plog - pico log for go

pico log - because it's so small and has no dependencies (only from go's stdlib).

** Why?

I want a logging library with

  - zero dependencies
  - can emit log messages per chan
  - easy to use
  - TODO: abstract over other loggers

*** Non Goals

  - blazing fast
  - a lot of features

** Examples

*** console logging

Simple console logging

 #+BEGIN_SRC go :tangle examples/console.go
   package main

   import  "github.com/j-keck/plog"

   func main() {
       log := plog.NewConsoleLogger()

       log.Info("startup - version: 0.1")
       log.Debug("change to debug level")
       log.SetLevel(plog.Debug)
       log.Debug("level changed")
   }
 #+END_SRC

#+BEGIN_SRC shell :results output :exports both
go run examples/console.go
#+END_SRC

#+RESULTS:
:  INFO | 21.04 11:22:39.952 |              console:8   | startup - version: 0.1
: DEBUG | 21.04 11:22:39.953 |              console:11  | level changed


*** log stream

log stream per go chan

#+BEGIN_SRC go :tangle examples/stream.go
  package main

  import "github.com/j-keck/plog"
  import "fmt"
  import "time"

  func main() {
      log := plog.NewStreamLogger()

      go func() {
          logC := log.Subscribe(10)
          for {
              msg := <- logC
              fmt.Printf("level: %s, message: %s\n",
                  msg.Level, msg.Message)
          }
      }()

      log.Info("startup")
      log.Info("shutdown")
      log.WaitForSubscribers(100 * time.Millisecond)
  }
#+END_SRC

#+BEGIN_SRC shell :results output :exports both
go run examples/stream.go
#+END_SRC

#+RESULTS:
: level:  INFO, message: startup
: level:  INFO, message: ende

*** flags (`go run examples/flag.go`)

Log level per flag

#+BEGIN_SRC go :tangle examples/flag.go
  package main

  import "github.com/j-keck/plog"
  import "flag"


  func main() {
      log := plog.NewConsoleLogger()

      logLevel := plog.Info
      plog.FlagDebugVar(&logLevel,  "v", "debug")
      plog.FlagTraceVar(&logLevel, "vv", "trace")
      flag.Parse()

      log.SetLevel(logLevel)

      log.Info("info")
      log.Debug("debug")
      log.Trace("trace")
  }
#+END_SRC

#+BEGIN_SRC shell :results output :exports both
run() { echo $(repeat 80 printf -); echo $@; $@; echo}

run go run examples/flag.go
run go run examples/flag.go -v
run go run examples/flag.go -vv
#+END_SRC

#+RESULTS:
#+begin_example
--------------------------------------------------------------------------------
go run examples/flag.go
 INFO | 21.04 11:23:04.946 |                 flag:17  | info

--------------------------------------------------------------------------------
go run examples/flag.go -v
 INFO | 21.04 11:23:05.276 |                 flag:17  | info
DEBUG | 21.04 11:23:05.277 |                 flag:18  | debug

--------------------------------------------------------------------------------
go run examples/flag.go -vv
 INFO | 21.04 11:23:05.617 |                 flag:17  | info
DEBUG | 21.04 11:23:05.617 |                 flag:18  | debug
TRACE | 21.04 11:23:05.617 |                 flag:19  | trace

#+end_example


* plog - pico log for go

pico log - because it's so small and has no dependencies (only from go's stdlib).

** Why?

I want a logging library with

  - zero dependencies
  - can emit log messages per chan
  - easy to use
  - TODO: abstract over other loggers

*** Non Goals

  - blazing fast
  - a lot of features

** Examples

*** console logging

Simple console logging

 #+BEGIN_SRC go :tangle examples/console.go
   package main

   import  "github.com/j-keck/plog"

   func main() {
       log := plog.NewConsoleLogger()

       log.Info("startup")
       log.Debug("change to debug level")
       log.SetLevel(plog.Debug)
       log.Debug("level changed")
   }
 #+END_SRC

#+BEGIN_SRC shell :results output :exports both
go run examples/console.go
#+END_SRC

#+RESULTS:
:  INFO | 06.05 10:08:45.169 |              console:8   | startup
: DEBUG | 06.05 10:08:45.169 |              console:11  | level changed


*** log stream

log stream per go chan

#+BEGIN_SRC go :tangle examples/stream.go
  package main

  import "github.com/j-keck/plog"
  import "fmt"
  import "time"

  func main() {
      log := plog.NewStreamLogger()
      logC := log.Subscribe(10)

      log.Info("startup")
      log.Debug("change to debug level")
      log.SetLevel(plog.Debug)
      log.Debug("level changed")

      go func() {
        for msg := range logC {
          fmt.Printf("%s: %s\n", msg.Level, msg.Message)
        }
      }()

      log.WaitForSubscribers(100 * time.Millisecond)
  }
#+END_SRC

#+BEGIN_SRC shell :results output :exports both
go run examples/stream.go
#+END_SRC

#+RESULTS:
: INFO: startup
: DEBUG: level changed


*** flags

Log level per flag

#+BEGIN_SRC go :tangle examples/flag.go
  package main

  import "github.com/j-keck/plog"
  import "flag"


  func main() {
      log := plog.NewConsoleLogger()

      logLevel := plog.Info
      plog.FlagDebugVar(&logLevel,  "v", "debug")
      plog.FlagTraceVar(&logLevel, "vv", "trace")
      flag.Parse()

      log.SetLevel(logLevel)

      log.Info("info")
      log.Debug("debug")
      log.Trace("trace")
  }
#+END_SRC

#+BEGIN_SRC shell :results output :exports both
run() { echo $(repeat 80 printf -); echo $@; $@; echo;}

run go run examples/flag.go
run go run examples/flag.go -v
run go run examples/flag.go -vv
#+END_SRC

#+RESULTS:
#+begin_example

go run examples/flag.go
 INFO | 06.05 10:08:57.578 |                 flag:17  | info


go run examples/flag.go -v
 INFO | 06.05 10:08:57.961 |                 flag:17  | info
DEBUG | 06.05 10:08:57.962 |                 flag:18  | debug


go run examples/flag.go -vv
 INFO | 06.05 10:08:58.308 |                 flag:17  | info
DEBUG | 06.05 10:08:58.308 |                 flag:18  | debug
TRACE | 06.05 10:08:58.308 |                 flag:19  | trace

#+end_example


*** broadcast

Broadcast log messages to multiple receivers.

To simplify the example, only console loggers are used,
but you can also use stream loggers.

#+BEGIN_SRC go :tangle examples/broadcast.go
  package main

  import "github.com/j-keck/plog"

  func main() {
      log := plog.NewBroadcastLogger(
          plog.NewConsoleLogger(),
          plog.NewConsoleLogger(),
          plog.NewConsoleLogger(),
      )

      log.Info("startup")
      log.Debug("change to debug level")
      log.SetLevel(plog.Debug)
      log.Debug("level changed")
  }
#+END_SRC

#+BEGIN_SRC shell :results output :exports both
go run examples/broadcast.go
#+END_SRC

#+RESULTS:
:  INFO | 06.05 10:09:03.649 |            broadcast:12  | startup
:  INFO | 06.05 10:09:03.649 |            broadcast:12  | startup
:  INFO | 06.05 10:09:03.649 |            broadcast:12  | startup
: DEBUG | 06.05 10:09:03.649 |            broadcast:15  | level changed
: DEBUG | 06.05 10:09:03.649 |            broadcast:15  | level changed
: DEBUG | 06.05 10:09:03.649 |            broadcast:15  | level changed

*** change log output

#+BEGIN_SRC go :tangle examples/logformat.go
  package main

  import "github.com/j-keck/plog"


  func main() {
      log := plog.NewConsoleLogger()
      log.SetLogFields(
          plog.Level("%-5s"),
          plog.Timestamp("Mon Jan 2 15:04:05"),
          plog.Message("%s"),
      ).SetLogSeparator(" - ")

      log.Info("startup")
      log.Debug("change to debug level")
      log.SetLevel(plog.Debug)
      log.Debug("level changed")
  }
#+END_SRC


#+BEGIN_SRC shell :results output :exports both
go run examples/logformat.go
#+END_SRC

#+RESULTS:
: INFO  - Mon May 6 10:09:08 - startup
: DEBUG - Mon May 6 10:09:08 - level changed
